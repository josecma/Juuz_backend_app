// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  seed            = "prisma/seed.ts"
  binaryTargets   = "native"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL_2")
  extensions = [postgis()]
}

// model Request {
//   id        String   @id @default(uuid())
//   source    Json?
//   target    Json?
//   channel   Json?
//   type      String
//   createdAt DateTime @default(now())

//   @@map("requests")
// }

// model OutboxRequestEvent {
//   id          String   @id @default(uuid())
//   topic       String // "request.created" | "request.deleted"
//   payload     Json
//   attempts    Int      @default(0)
//   maxAttempts Int      @default(3) @map("max_attempts")
//   status      String   @default("PENDING") // "PENDING" | "PROCESSED" | "FAILED"
//   createdAt   DateTime @default(now()) @map("created_at")
//   updatedAt   DateTime @updatedAt

//   @@index([status, createdAt])
//   @@map("outbox_request_events")
// }

model CompanyJoinRequest {
  id          String @id @default(uuid())
  applicantId String @map("applicant_id")
  companyId   String @map("company_id")
  role        String
  status      String @default("PENDING") // [ PENDING, ACCEPTED, REJECTED ] 

  @@index([role, status, applicantId])
  @@map("company_join_requests")
}

model CompanyInvitationRequest {
  id        String @id @default(uuid())
  inviterId String @map("inviter_id")
  invitee   Json
  companyId String @map("company_id")
  role      String // [ DRIVER ] 
  status    String @default("PENDING") // [ PENDING, ACCEPTED, REJECTED ] 

  @@index([role, status, inviterId, companyId])
  @@map("company_invitation_requests")
}

// model OutboxJoinCompanyRequestEvent {
//   id          String   @id @default(uuid())
//   topic       String // "request.created" | "request.deleted"
//   payload     Json
//   attempts    Int      @default(0)
//   maxAttempts Int      @default(3) @map("max_attempts")
//   status      String   @default("PENDING") // "PENDING" | "PROCESSED" | "FAILED"
//   createdAt   DateTime @default(now()) @map("created_at")
//   updatedAt   DateTime @updatedAt

//   @@index([status, createdAt])
//   @@map("outbox_join_company_request_events")
// }

model User {
  id        String   @id @default(uuid())
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  profilePicture ProfilePicture? @relation(name: "profile_picture")
  identities     Identity[]      @relation(name: "user_identities")
  credentials    Credential[]    @relation(name: "user_credentials")
  vehicles       Driver[]        @relation(name: "user_vehicles")

  @@map("users")
}

model Identity {
  id        String   @id @default(uuid())
  type      String
  value     String
  metadata  Json?
  userId    String   @map("user_id")
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user                 User                  @relation(name: "user_identities", fields: [userId], references: [id])
  identityVerification IdentityVerification? @relation(name: "identity_verification")

  @@unique([type, value])
  @@index([verified, type, value])
  @@map("identities")
}

model Credential {
  id        String    @id @default(uuid())
  userId    String    @unique @map("user_id")
  value     String
  expiresAt DateTime? @map("expires_at")

  user User @relation(name: "user_credentials", fields: [userId], references: [id])

  @@index([userId, expiresAt])
  @@map("credentials")
}

model IdentityVerification {
  id         String    @id @default(uuid())
  identityId String?   @unique @map("identity_id")
  status     String    @default("PENDING")
  attempts   Int       @default(0)
  expiresAt  DateTime? @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  identity Identity? @relation(name: "identity_verification", fields: [identityId], references: [id])

  @@index([identityId, status])
  @@map("identity_verifications")
}

model AuthenticationProcess {
  id        String   @id @default(uuid())
  method    String // [ BASIC, TOTP, OAUTH, MAGIC_LINK ]
  status    String // [ PENDING, FAILED, SUCCESS ] 
  attempts  Int      @default(0)
  metadata  Json
  createdAt DateTime @default(now())

  @@index([status, method])
  @@map("authentication_processes")
}

model UserAuthenticationProcess {
  id                      String @id @default(uuid())
  userId                  String @map("user_id")
  authenticationProcessId String @unique @map("authentication_process_id")

  @@index([userId])
  @@map("user_authentication_processes")
}

model UserOtpSecret {
  id     String @id() @default(uuid())
  userId String @unique @map("user_id")
  secret String @map("secret")

  @@map("user_otp_secrets")
}

model UserNotificationToken {
  id        String   @id() @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  platform  String
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, platform])
  @@index([userId, platform])
  @@map("user_notification_tokens")
}

// model UserHotpCounter {
//   id              String   @id @default(uuid())
//   userOtpSecretId String   @unique @map("user_otp_secret_id")
//   counter         Int      @default(0)
//   createdAt       DateTime @default(now())

//   @@unique([counter, userOtpSecretId])
//   @@index([userOtpSecretId])
//   @@map("user_hotp_counters")
// }

model Channel {
  id    String        @id @default(uuid())
  name  String        @unique()
  users UserChannel[]

  @@index([name])
  @@map("channels")
}

model UserChannel {
  channelId   String   @map("channel_id")
  channel     Channel  @relation(fields: [channelId], references: [id])
  userId      String   @map("user_id")
  permissions String[]
  items       Json

  @@id([channelId, userId])
  @@map("user_channels")
}

model TrackingChannel {
  channelId     String   @map("channel_id")
  stakeholderId String   @map("stakeholder_id")
  permissions   String[]

  @@id([channelId, stakeholderId])
  @@map("tracking_channels")
}

model Business {
  id     String @id @default(uuid())
  status String

  @@map("businesses")
}

model Item {
  itemId     String @map("item_id")
  businessId String @map("business_id")
  type       String @map("type")

  @@id([businessId, itemId])
  @@index([itemId])
  @@index([businessId])
  @@map("items")
}

model BusinessStakeholder {
  role       String
  businessId String @map("business_id")
  userId     String @map("user_id")

  @@id([businessId, userId])
  @@map("business_stakeholders")
}

model Bid {
  id         String @id @default(uuid())
  bidderId   String @map("bidder_id")
  itemId     String @map("item_id")
  businessId String @map("business_id")
  price      Json

  @@index([itemId, businessId])
  @@index([bidderId])
  @@map("bids")
}

model Criterion {
  id                   String                @id @default(uuid())
  name                 String                @unique()
  description          String?
  max                  Int                   @default(5)
  criterionMemberships CriterionMembership[]
  scores               Score[]

  @@index([name])
  @@map("criteria")
}

model CriterionSet {
  id          String  @id @default(uuid())
  name        String
  description String?
  version     Int     @default(1)

  criteria    CriterionMembership[]
  evaluations Evaluation[]

  @@unique([name, version])
  @@map("criterion_sets")
}

model DefaultSetOfCriteriaPerUserRole {
  criterionSetId String @unique()
  userRole       String @unique()

  @@unique([criterionSetId, userRole])
  @@map("default_set_of_criteria_per_user_roles")
}

model CriterionMembership {
  setId       String       @map("set_Id")
  set         CriterionSet @relation(fields: [setId], references: [id])
  criterionId String       @map("criterion_Id")
  criterion   Criterion    @relation(fields: [criterionId], references: [id])
  order       Int?

  @@id([setId, criterionId])
  @@map("criterion_set_memberships")
}

model Evaluation {
  id             String       @id @default(uuid())
  evaluatedId    String       @map("evaluated_Id")
  criterionSet   CriterionSet @relation(fields: [criterionSetId], references: [id])
  criterionSetId String       @map("criterionSet_Id")
  evaluatorId    String       @map("evaluator_Id")
  role           String       @map("role")
  scores         Score[]
  createdAt      DateTime     @default(now()) @map("created_at")

  @@map("evaluations")
}

model Score {
  id           String     @id @default(uuid())
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId String     @map("evaluation_Id")
  criterion    Criterion  @relation(fields: [criterionId], references: [id])
  criterionId  String     @map("criterion_Id")
  value        Int
  comment      String?

  @@map("scores")
}

model File {
  id             String          @id @default(uuid())
  key            String          @unique() @db.VarChar()
  size           String
  mimeType       String
  metadata       Json
  uploadedAt     DateTime        @default(now()) @map("uploaded_at")
  evidenceFiles  EvidenceFile[]
  profilePicture ProfilePicture?

  @@index([key])
  @@map("files")
}

model ProfilePicture {
  userId String @unique() @map("user_id")
  user   User   @relation(name: "profile_picture", fields: [userId], references: [id])
  fileId String @unique() @map("file_id")
  file   File   @relation(fields: [fileId], references: [id])

  @@id([userId, fileId])
  @@map("profile_pictures")
}

model EvidenceFile {
  id         String   @id @default(uuid())
  evidenceId String
  evidence   Evidence @relation(fields: [evidenceId], references: [id])
  fileId     String
  file       File     @relation(fields: [fileId], references: [id])

  @@unique([fileId])
  @@map("evidence_files")
}

// model Dispute {
//   id          Int       @id @default(autoincrement())
//   userId      Int       @map("user_id")
//   orderId     Int       @map("order_id")
//   description String    @db.VarChar(255)
//   status      String
//   user        User      @relation(name: "user_otm_dispute", fields: [userId], references: [id])
//   order       Order     @relation(name: "order_otm_dispute", fields: [orderId], references: [id])
//   startedAt   DateTime  @default(now()) @map("started_at")
//   endedAt     DateTime? @map("ended_at")

//   @@map("disputes")
// }

model Evidence {
  id            String         @id @default(uuid())
  description   String         @db.VarChar(255)
  status        Boolean
  coordinates   Json
  type          String
  userId        String         @map("user_id")
  orderId       String         @map("order_id")
  order         Order          @relation(name: "evidence_otm_order", fields: [orderId], references: [id])
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  evidenceFiles EvidenceFile[]

  @@map("evidences")
}

model Category {
  id         String     @id @default(uuid())
  name       String     @unique
  path       String     @unique
  categoryId String?    @map("category_id")
  category   Category?  @relation("category_otm_category", fields: [categoryId], references: [id], onDelete: Cascade)
  categories Category[] @relation("category_otm_category")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt() @map("updated_at")

  @@index([path])
  @@map("categories")
}

model Vehicle {
  id           String   @id @default(uuid())
  vin          String   @unique
  categoryPath String   @map("category_path")
  year         Int
  color        String
  licensePlate String   @map("license_plate")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([vin, licensePlate])
  @@map("vehicles")
}

model Company {
  id                 String          @id @default(uuid())
  carrierIdentifier  String? // alias de la company
  usdot              String?
  mc                 String?
  primaryAdminEmail  String? // company email
  countryCode        String?
  phoneNumber        String?
  extension          String?
  addressLine1       String? // sede
  addressLine2       String? // sedes 11 y2 y3 
  city               String?
  state              String?
  zipCode            String?
  country            String?
  rating             Int?            @default(0)
  dotNumber          String?         @unique
  stripeAccountId    String?         @map("stripe_account_id")
  expMonth           String?         @map("exp_month")
  expYear            String?         @map("exp_year")
  cardNumber         String?         @unique @map("card_number")
  phone              String?
  infoUrl            String?
  hours              String?
  name               String?         @unique
  insuranceDetailsId String?         @unique
  insuranceDetails   Photo?          @relation("InsuranceDetails", fields: [insuranceDetailsId], references: [id]) // Relación nombrada
  status             String          @default("NON_VERIFIED")
  licenseType        String?
  photos             Photo[]         @relation("CompanyPhotos")
  transfers          Transfer[]
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  createdBy          String?         @map("created_by")
  updatedBy          String?         @map("updated_by")
  deletedAt          DateTime?       @map("deleted_at")
  deletedBy          String?         @map("deleted_by")
  version            Int?            @default(0)
  ownerId            String?         @unique @map("owner_id")
  payments           Payment[]
  paymentMethod      PaymentMethod[]
  vehicles           Driver[]
}

model Payment {
  id              String        @id @default(uuid())
  amount          Float
  finalAmount     Float?
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime
  depositDate     DateTime
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  companyId       String
  company         Company       @relation(fields: [companyId], references: [id])
  account         Account[]
  transfer        Transfer?     @relation
  orderId         String?       @unique
  order           Order?        @relation(fields: [orderId], references: [id])
  userId          String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  createdBy       String?       @map("created_by")
  updatedBy       String?       @map("updated_by")
  deletedAt       DateTime?     @map("deleted_at")
  deletedBy       String?       @map("deleted_by")
  version         Int           @default(0)
  ownerId         String?       @map("owner_id")
}

model Transfer {
  id          String    @id @default(uuid())
  amount      Float
  currency    String
  description String?
  payment     Payment?  @relation(fields: [paymentId], references: [id])
  paymentId   String?   @unique
  company     Company?  @relation(fields: [companyId], references: [id])
  companyId   String?
  account     Account?  @relation(fields: [accountId], references: [id])
  accountId   String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  createdBy   String?   @map("created_by")
  updatedBy   String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedBy   String?   @map("deleted_by")
  version     Int?      @default(0)
}

model PaymentMethod {
  id                 String            @id @default(uuid())
  name               String
  type               PaymentMethodType // Enum para el tipo de método de pago
  date               DateTime // Fecha para hacer la transferencia
  discountPercentage Float // Porcentaje de descuento a aplicar
  payments           Payment[]
  company            Company?          @relation(fields: [companyId], references: [id])
  companyId          String?
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  createdBy          String?           @map("created_by")
  updatedBy          String?           @map("updated_by")
  deletedAt          DateTime?         @map("deleted_at")
  deletedBy          String?           @map("deleted_by")
  version            Int               @default(0)

  @@unique([name, companyId])
}

model Account {
  id          String          @id @default(uuid())
  stripeId    String // Identificador de Stripe para el pago
  totalAmount Float           @default(0) // Total acumulado de los pagos
  bankCard    String // Información de la tarjeta bancaria 
  ytdGross    Float // Total bruto de ingresos hasta la fecha actual en el año.
  netBalance  Float // Saldo total después de deducir gastos y deudas.
  paymentId   String?
  payment     Payment?        @relation(fields: [paymentId], references: [id])
  transfers   Transfer[]
  accountType TransactionType // Tipo de cuenta: entrada o salida de dinero
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  createdBy   String?         @map("created_by")
  updatedBy   String?         @map("updated_by")
  deletedAt   DateTime?       @map("deleted_at")
  deletedBy   String?         @map("deleted_by")
  version     Int             @default(0)
}

model Message {
  id            String                 @id @default(uuid())
  negotiationId String?
  description   DescriptionMessageEnum
  negotiation   Negotiation?           @relation(fields: [negotiationId], references: [id])
  userId        String?
  orderId       String?
  order         Order?                 @relation(fields: [orderId], references: [id])
  unread        Boolean?               @default(true) @map("is_active")
  createdAt     DateTime               @default(now()) @map("created_at")
  updatedAt     DateTime               @updatedAt @map("updated_at")
  createdBy     String?                @map("created_by")
  updatedBy     String?                @map("updated_by")
  deletedAt     DateTime?              @map("deleted_at")
  deletedBy     String?                @map("deleted_by")
  version       Int                    @default(0)
  ownerId       String                 @map("owner_id")
  companyId     String                 @map("company_id")
}

model UserPoint {
  id      String  @id @default(uuid())
  pointId String  @unique()
  point   Point   @relation(fields: [pointId], references: [id])
  userId  String  @unique()
  share   Boolean

  @@unique([pointId, userId])
  @@map("user_points")
}

model CompanyMember {
  id        String @id @default(uuid())
  memberId  String @map("user_id")
  companyId String @map("company_id")
  roleId    String @map("role_id")

  @@unique([memberId, companyId, roleId])
  @@index([memberId])
  @@index([companyId])
  @@index([roleId])
  @@map("company_members")
}

model CompanyScore {
  id        String @id @default(uuid())
  companyId String @unique @map("company_id")
  lastDiv   Float  @map("last_dev")
  lastAvg   Float  @map("last_avg")

  @@index([companyId])
  @@map("company_scores")
}

model CompanyMemberRole {
  id   String @id @default(uuid())
  name String @unique

  @@index([name])
  @@map("company_member_roles")
}

model UserRole {
  id   String @id @default(uuid())
  name String @unique

  @@index([name])
  @@map("user_roles")
}

// model Role {
//   id          Int          @id @default(autoincrement())
//   type        RolesEnum
//   name        String       @unique()
//   description String
//   companies   Company[]    @relation("company_to_roles")
//   permission  Permission[]
//   createdAt   DateTime     @default(now()) @map("created_at")
//   updatedAt   DateTime     @updatedAt @map("updated_at")
//   createdBy   String?      @map("created_by")
//   updatedBy   String?      @map("updated_by")
//   deletedAt   DateTime?    @map("deleted_at")
//   deletedBy   String?      @map("deleted_by")
//   ownerId     Int?         @map("owner_id")
//   version     Int          @default(0)
//   companyId   Int?         @map("company_id")
// }

// model UserCompanyRole {
//   id        String @id @default(uuid())
//   userId    String @map("user_id")
//   companyId Int?   @map("company_id")
//   roleId    Int    @map("role_id")

//   createdAt DateTime  @default(now()) @map("created_at")
//   updatedAt DateTime  @updatedAt @map("updated_at")
//   createdBy String?   @map("created_by")
//   updatedBy String?   @map("updated_by")
//   deletedAt DateTime? @map("deleted_at")
//   deletedBy String?   @map("deleted_by")
//   version   Int       @default(0)
//   Company   Company?  @relation(fields: [companyId], references: [id])

//   @@unique([userId, companyId])
//   @@map("user_company_roles")
// }

model Session {
  id        String    @id @default(uuid())
  userId    String
  hash      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

// model Permission {
//   id          Int     @id @default(autoincrement())
//   name        String
//   action      String
//   description String
//   active      Boolean @default(true)

//   @@unique([action, name])
// }

model Driver {
  id            String         @id @default(uuid())
  vinNumber     String         @unique
  year          Int
  insuranceDoc  String?
  faceId        String?
  vehicleType   String?
  serviceId     String?        @map("service_id")
  service       Service?       @relation(fields: [serviceId], references: [id])
  vehicleOrder  VehicleOrder[]
  photos        Photo[]
  capacity      Int?
  vehicleInfoId String?
  vehicleInfo   VehicleInfo?   @relation(fields: [vehicleInfoId], references: [id])
  point         Point?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdBy     String?        @map("created_by")
  updatedBy     String?        @map("updated_by")
  deletedAt     DateTime?      @map("deleted_at")
  deletedBy     String?        @map("deleted_by")
  version       Int            @default(0)
  ownerId       String         @map("owner_id")

  user      User     @relation(name: "user_vehicles", fields: [ownerId], references: [id])
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
}

model VehicleInfo {
  id        String    @id @default(uuid())
  model     Model     @relation(fields: [modelId], references: [id])
  modelId   String
  driver    Driver[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  createdBy String?   @map("created_by")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")
  version   Int       @default(0)
  ownerId   String    @map("owner_id")
  companyId String?   @map("company_id")
}

model Model {
  id           String         @id @default(uuid())
  name         String
  year         Int?
  brand        Brand          @relation(fields: [brandId], references: [id])
  brandId      String         @map("brand_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  createdBy    String?        @map("created_by")
  updatedBy    String?        @map("updated_by")
  deletedAt    DateTime?      @map("deleted_at")
  deletedBy    String?        @map("deleted_by")
  version      Int            @default(0)
  VehicleInfo  VehicleInfo[]
  VehicleOrder VehicleOrder[]

  @@unique([name, brandId, year])
}

model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  models    Model[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  createdBy String?   @map("created_by")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")
  version   Int       @default(0)
}

model VehicleOrder {
  id                           String                 @id @default(uuid())
  qty                          Int?
  year                         Int?                   @default(2000)
  vehicleType                  VehicleType            @default(PASSENGER_CAR) @map("vehicle_type")
  state                        VihecleOrderStatusEnum @default(RUNNING)
  vehicleColor                 String?                @map("vehicle_color")
  licensePlate                 String?                @map("license_plate")
  lastNumber                   String?                @map("last_number")
  vehicleProblem               String?                @map("vehicle_Problem")
  additionalDetail             String?                @map("additional_detail")
  isTheKeysWithTheVehicle      Boolean?               @map("is_the_keys_with_the_vehicle")
  stateProvince                String?                @map("state_province")
  additionalVehicleInformation String?                @map("additional_vehicle_information")
  trailerType                  String?                @map("trailer_type")
  wideLoad                     Boolean                @default(false) @map("wide_load")
  orderId                      String?                @map("order_id")
  order                        Order?                 @relation(fields: [orderId], references: [id])
  modelId                      String?                @map("model_id")
  model                        Model?                 @relation(fields: [modelId], references: [id])
  driverId                     String?
  driver                       Driver?                @relation(fields: [driverId], references: [id])
  createdAt                    DateTime               @default(now()) @map("created_at")
  updatedAt                    DateTime               @updatedAt @map("updated_at")
  createdBy                    String?                @map("created_by")
  updatedBy                    String?                @map("updated_by")
  deletedAt                    DateTime?              @map("deleted_at")
  deletedBy                    String?                @map("deleted_by")
  version                      Int                    @default(0)
  ownerId                      String                 @map("owner_id")
  companyId                    String?                @map("company_id")
}

model Photo {
  id        String    @id @default(uuid())
  name      String    @unique
  orderId   String?   @map("order_id")
  order     Order?    @relation(fields: [orderId], references: [id])
  driverId  String?
  driver    Driver?   @relation(fields: [driverId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  createdBy String?   @map("created_by")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")
  version   Int       @default(0)
  ownerId   String    @map("owner_id")
  companyId String?   @map("company_id")
  Company   Company?  @relation("CompanyPhotos", fields: [companyId], references: [id])
  Insurance Company?  @relation("InsuranceDetails")
  userId    String?   @map("user_id")
}

model FleetRecord {
  id            String      @id @default(uuid())
  vinNumber     String
  vehicleType   VehicleType @default(TRUCK)
  vehicleInfoId String?
  orderId       String?     @unique @map("order_id")
  order         Order?      @relation(fields: [orderId], references: [id])
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  createdBy     String?     @map("created_by")
  updatedBy     String?     @map("updated_by")
  deletedAt     DateTime?   @map("deleted_at")
  deletedBy     String?     @map("deleted_by")
  version       Int         @default(0)
  ownerId       String      @map("owner_id")
  companyId     String?     @map("company_id")
}

model Order {
  id                        String            @id @default(uuid())
  userId                    String            @map("user_id")
  serviceId                 String            @map("service_id")
  driverId                  String?           @map("driver_id")
  referredId                String?           @map("referred_id")
  isAssistanceRequestForNow Boolean           @default(false) @map("is_assistance_request_for_now")
  expirationTime            DateTime          @map("expiration_time")
  pickUpDate                String?           @map("pick_up_date")
  pricePerMile              Decimal           @default(0) @map("price_per_mile")
  aditionalInfo             String            @default("") @map("aditional_info")
  deliveryDate              String?           @map("delivery_date")
  paymentMethod             PaymentMethodEnum @default(UNKNOWN) @map("payment_method")
  price                     Int?
  milles                    Int               @default(0)
  note                      String?           @default("")
  email                     String?
  reason                    String?
  photos                    Photo[]
  phone                     String?
  firstName                 String?           @map("first_name")
  lastName                  String?           @map("last_name")
  emailSecond               String?           @map("email_second")
  phoneSecond               String?           @map("phone_second")
  firstNameSecond           String?           @map("first_name_second")
  lastNameSecond            String?           @map("last_name_second")
  status                    OrderStatusEnum
  subStatus                 OrderSubStatus    @map("sub_status")
  subServiceId              String?           @map("sub_service_id")
  subService                SubService?       @relation(fields: [subServiceId], references: [id])
  departure                 Point?            @relation(name: "DeparturePoint", fields: [departureId], references: [id])
  departureId               String?           @map("departure_id")
  destination               Point?            @relation(name: "DestinationPoint", fields: [destinationId], references: [id])
  destinationId             String?           @map("destination_id")
  carCount                  Int               @map("car_count")
  information               Information?
  rute                      Point[]
  createdAt                 DateTime          @default(now()) @map("created_at")
  updatedAt                 DateTime          @updatedAt @map("updated_at")
  createdBy                 String?           @map("created_by")
  updatedBy                 String?           @map("updated_by")
  deletedAt                 DateTime?         @map("deleted_at")
  deletedBy                 String?           @map("deleted_by")
  version                   Int               @default(0)
  ownerId                   String            @map("owner_id")
  companyId                 String?           @map("company_id")
  ablyChannel               AblyChannel[]     @relation("AblyChannelToOrder")
  Comunication              Comunication?
  VehicleOrder              VehicleOrder[]
  Negotiation               Negotiation[]
  messenge                  Message[]
  payment                   Payment?          @relation
  isActive                  Boolean?          @default(true) @map("is_active")
  FleetRecord               FleetRecord?
  evidences                 Evidence[]        @relation(name: "evidence_otm_order")
}

model Negotiation {
  id                  String              @id @default(uuid())
  userId              String              @map("user_id")
  driverId            String              @map("driver_id")
  orderId             String              @map("order_id")
  offerCarrier        Int
  lastNegotiaton      LastNegotiatonEnums @default(SHIEPER)
  status              NegotiationStatus   @default(OPEN)
  counterOfferShipper Int?                @default(0)
  order               Order               @relation(fields: [orderId], references: [id])
  companyId           String?             @map("company_id")
  messenge            Message[]

  @@unique([driverId, orderId])
}

model Point {
  id                String                               @id @default(uuid())
  userId            String?                              @map("user_id")
  coords            Unsupported("geometry(Point, 4326)")
  longitude         String?
  latitude          String?
  type              TypePointEnum?                       @default(COMPANY)
  pointName         String                               @default("") @map("point_name")
  address           String?                              @default("")
  city              String?                              @default("")
  state             String?                              @default("")
  information       Information?
  isActive          Boolean                              @default(true) @map("is_active")
  departureOrders   Order[]                              @relation("DeparturePoint")
  destinationOrders Order[]                              @relation("DestinationPoint")
  orderId           String?                              @map("order_id")
  order             Order?                               @relation(fields: [orderId], references: [id])
  driver            Driver?                              @relation(fields: [driverId], references: [id])
  driverId          String?                              @unique @map("driver_id")
  createdAt         DateTime                             @default(now()) @map("created_at")
  updatedAt         DateTime?                            @updatedAt @map("updated_at")
  createdBy         String?                              @map("created_by")
  updatedBy         String?                              @map("updated_by")
  deletedAt         DateTime?                            @map("deleted_at")
  deletedBy         String?                              @map("deleted_by")
  version           Int                                  @default(0)
  ownerId           String?                              @map("owner_id")
  companyId         String?                              @map("company_id")
  userPoint         UserPoint?
  //user              User?                                @relation(references: [id], fields: [userId])

  @@index([coords], name: "location_idx", type: Gist)
}

model MiniPoint {
  id        String                               @id @default(uuid())
  coords    Unsupported("geometry(Point, 4326)")
  createdAt DateTime                             @default(now()) @map("created_at")
  updatedAt DateTime                             @updatedAt @map("updated_at")
  createdBy String?                              @map("created_by")
  updatedBy String?                              @map("updated_by")
  deletedAt DateTime?                            @map("deleted_at")
  deletedBy String?                              @map("deleted_by")

  @@index([coords], name: "location1_idx", type: Gist)
}

model Information {
  id          String    @id @default(uuid())
  description String
  order       Order?    @relation(fields: [orderId], references: [id])
  orderId     String?   @unique
  point       Point?    @relation(fields: [pointId], references: [id])
  pointId     String?   @unique
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  createdBy   String?   @map("created_by")
  updatedBy   String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedBy   String?   @map("deleted_by")
  version     Int       @default(0)
  ownerId     String    @map("owner_id")
  companyId   String?   @map("company_id")
}

model Service {
  id          String       @id @default(uuid())
  name        ServiceEnum  @unique()
  description String?
  driver      Driver[]
  subService  SubService[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  createdBy   String?      @map("created_by")
  updatedBy   String?      @map("updated_by")
  deletedAt   DateTime?    @map("deleted_at")
  deletedBy   String?      @map("deleted_by")
  version     Int          @default(0)
  ownerId     String       @map("owner_id")
  companyId   String?      @map("company_id")
}

model SubService {
  id          String         @id @default(uuid())
  name        SubServiceEnum
  description String?
  serviceId   String?        @map("service_id")
  Service     Service?       @relation(fields: [serviceId], references: [id])
  order       Order[]
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  createdBy   String?        @map("created_by")
  updatedBy   String?        @map("updated_by")
  deletedAt   DateTime?      @map("deleted_at")
  deletedBy   String?        @map("deleted_by")
  version     Int            @default(0)
  ownerId     String         @map("owner_id")
  companyId   String?        @map("company_id")

  @@unique([name, serviceId])
}

model AblyChannel {
  id           String         @id @default(uuid())
  channelName  String         @unique
  ablyUser     String         @unique
  userId       String         @unique @map("user_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  createdBy    String?        @map("created_by")
  updatedBy    String?        @map("updated_by")
  deletedAt    DateTime?      @map("deleted_at")
  deletedBy    String?        @map("deleted_by")
  version      Int            @default(0)
  ownerId      String         @map("owner_id")
  companyId    String?        @map("company_id")
  order        Order[]        @relation("AblyChannelToOrder")
  driverChanel Comunication[] @relation("DriverChanel")
  riderChanel  Comunication[] @relation("RiderChanel")
}

model Comunication {
  id                    String           @id @default(uuid())
  order                 Order            @relation(fields: [orderId], references: [id])
  orderId               String           @unique
  driverChanel          AblyChannel      @relation(name: "DriverChanel", fields: [driverChanelId], references: [id])
  driverChanelId        String
  riderChanel           AblyChannel      @relation(name: "RiderChanel", fields: [riderChanelId], references: [id])
  riderChanelId         String
  numberOfComunications Int              @default(0)
  status                ComunicationEnum @default(OPEN)
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")
  createdBy             String?          @map("created_by")
  updatedBy             String?          @map("updated_by")
  deletedAt             DateTime?        @map("deleted_at")
  deletedBy             String?          @map("deleted_by")
  version               Int              @default(0)
  ownerId               String           @map("owner_id")
  companyId             String?          @map("company_id")

  @@unique([orderId, driverChanelId])
  @@unique([orderId, riderChanelId])
}

// model CarrierPerformance {
//   id                 Int       @id @default(autoincrement())
//   user               User      @relation(fields: [userId], references: [id])
//   userId             String
//   punctuality        Int
//   cargoCare          Int
//   friendliness       Int
//   additionalComments String?
//   createdAt          DateTime  @default(now()) @map("created_at")
//   updatedAt          DateTime  @updatedAt @map("updated_at")
//   createdBy          String?   @map("created_by")
//   updatedBy          String?   @map("updated_by")
//   deletedAt          DateTime? @map("deleted_at")
//   deletedBy          String?   @map("deleted_by")
//   version            Int       @default(0)
//   ownerId            Int?      @map("owner_id")
//   companyId          Int?      @map("company_id")
// }

// model ShipperPerformance {
//   id                   Int       @id @default(autoincrement())
//   user                 User      @relation(fields: [userId], references: [id])
//   userId               String
//   receptionPunctuality Int
//   instructionClarity   Int
//   friendliness         Int
//   accessibility        Int
//   onTimePayment        Int
//   additionalComments   String?
//   createdAt            DateTime  @default(now()) @map("created_at")
//   updatedAt            DateTime  @updatedAt @map("updated_at")
//   createdBy            String?   @map("created_by")
//   updatedBy            String?   @map("updated_by")
//   deletedAt            DateTime? @map("deleted_at")
//   deletedBy            String?   @map("deleted_by")
//   version              Int       @default(0)
//   ownerId              Int?      @map("owner_id")
//   companyId            Int?      @map("company_id")
// }

model Trip {
  id        String          @id @default(uuid())
  name      OrderStatusEnum
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  createdBy String?         @map("created_by")
  updatedBy String?         @map("updated_by")
  deletedAt DateTime?       @map("deleted_at")
  deletedBy String?         @map("deleted_by")
  version   Int             @default(0)
  ownerId   String?         @map("owner_id")
  companyId String?         @map("company_id")
  userId    String?
}

enum PaymentEnum {
  MASTERCARD
  VISA
  PAYPAL
  DISCOVER
  AMERICANEXPRESS
}

enum ServiceEnum {
  TOWING
  QUICK_ASSISTANCE
  OTHERS
}

enum SubServiceEnum {
  PICKUP
  IRON
  PULL
  MULTIPLE_CARS
  AIR
  JUMP
  PICKUP_DELIVERY
  RUBBISH
  MOVING
}

enum Status {
  LOADING
  LOADED
  UPCOMING
  DELIVERED
  RETURNING
  DOWNLOADING
  BROKEN
  CANCELLED
}

enum VihecleOrderStatusEnum {
  RUNNING
  NOT_RUNNING
}

enum ComunicationEnum {
  OPEN
  CLOSE
}

// enum RolesEnum {
//   SHIPPER
//   COMPANY
//   DRIVER
//   ANOTHER
//   ADMIN
// }

enum TypePointEnum {
  COMPANY
  DEPARTURE
  VEHICLE
  DESTANATION
  DESTINATION
}

enum DescriptionMessageEnum {
  CARRIER_OFERT
  SHIPPER_OFERT
  ACCEPT_ORDER
  FINISH_ORDER
  REFER_ORDER
}

enum NegotiationStatus {
  OPEN
  CLOSE
}

enum LastNegotiatonEnums {
  CARRIER
  SHIEPER
}

enum PaymentMethodEnum {
  CASH
  CREDIT_CARD
  UNKNOWN
}

enum OrderStatusEnum {
  PENDING
  ASSIGNED
  IN_TRANSIT
  HISTORY
  COMPLETED
  END
}

enum OrderSubStatus {
  UPCOMING
  ASSIGNED
  OUT_OF_TIME
  LATE_ORDER
  CANCELLED
  COMPLETE
  STARTED
  PICKUP
  REPORT
  DELIVERED
}

enum VehicleType {
  PASSENGER_CAR // Automóvil de pasajeros
  MULTIPURPOSE_VEHICLE // Vehículo multipropósito (SUV, camionetas)
  TRUCK // Camión
  BUS // Autobús
  MOTORCYCLE // Motocicleta
  TRAILER // Remolque
  LOW_SPEED_VEHICLE // Vehículo de baja velocidad
  VAN // Furgoneta
  MULTIPURPOSE_PASSENGER_VEHICLE
}

enum TransactionType {
  INCOME // Entrada de dinero
  EXPENSE // Salida de dinero
}

enum PaymentStatus {
  COMPLETED
  PENDING
}

enum PaymentMethodType {
  CASH // Método de pago en efectivo
  CARD // Método de pago con tarjeta
  QUICK_DEPOSIT // Método de depósito rápido
  WEEKLY_DEPOSIT // Método de depósito semanal
}

enum CompanyStatus {
  NON_VERIFIED
  VERIFIED
  HOLD
}

// enum CompanyType {
//   SHIPPER
//   COMPANY
//   SHIPPER_AND_COMPANY
// }
